# config network in centos  nano /etc/sysconfig/network-scripts/ifcfg-enp0s3  set onboot=yes
# Notes and some command lines from ansible.
-- To connect to another server successfully via ssh without having to enter passwords, but with just a paraphrase:
1. first ssh into all servers and accept fingerprints.
2. If that does not work, then make sure that there are no existing ssh keys, else wipe keys already there and create new ones.
3. Make sure that when creating and saving the ansible ssh-key to specify the path e.g /home/patrick/.ssh/ansible .
-- To create a more secured and standard ssh-key for specific purposes use the command below:
ssh-keygen -t ed25519 -C "server3 default" where server3 default is the ssh key ID.
-- To copy an ssh-key(public key) to another server from one server, use:
ssh-copy-id -i ~/.ssh/id_ed25519.pub username@server-ip-address
# Note that to work with same ssh keys across multiple servers which you administer, then we need to be using same usernames on those servers.
# Else then on your ansible inventory file, you need to add each username and the servers ip address.
# Make sure that the ansible keys you create do not have ssh paraphrases.
# To connect with an ansible key created, just specify the path to the key using the command below:
ssh -i ~/.ssh/ansible <ip address>

-- To setup an alias in linux for example an ssh alias so you do not always have to enter the ssh paraphrase everytime, but just enter it once and use it for the whole shell session:
1. sudo nano ~/.bashrc
2. scroll down and enter the lines below somewhere in the file:
# ssh agent
alias ssha='eval $(ssh-agent) ssh-add' 
3. then just run 'ssha' once and your paraphrase will be saved for the whole session. (To see the ssh-agent process id; do ps aux | grep <the ssh agent ID>)


--To clone a git repository, use the command below:
git clone <path(ignore this argument if you want to clone to your current directory)> <the ssh link to the git repository you want to clone>
git config --global user.name "your full name e.g Patrick Okwe"
git config --global user.email "your email address"
cat ~/.gitconfig ( To see your configurations as set up above )
-- To be able to connect to your github account with your linux ssh-key, add your key to your github account.
--To run a ping on all your servers in your inventory file:
1. Create a file called inventory using the command nano inventory
2. Add all the ip addresses of the servers to be managed there( add the client username if needed)
3. ansible all --key-file ~/.ssh/<ssh-id of your ansible ssh-key> -i inventory -m ping
4. Create a file and call it ansible.cfg and Add 3. above to it. Then just run below to check if all servers are connected or can be reached.
5. ansible all -m ping

-- To gather facts about your servers use below commands (These facts gives you a list of conditionals which you can use in your playbooks.)
ansible all -m gather_facts
ansible all -m gather_facts --limit <ip address>      # This limits your facts to a particular server
--To do some operations with the apt package on ubuntu linux server the run the following commands below.
ansible all -m apt -a update_cache=true --become --ask-become-pass 
ansible all -m apt -a name=tmux --become --ask-become-pass ( To install the tmux package )
ansible all -m apt -a "upgrade=dist" --become --ask-become-pass 
 

--To install a linux package via ansible, for example apache2:
1. Create a .yml file, as seen in install_apache.yml file and run the command in 2. below
2. ansible-playbook -become --ask-become-pass install_apache.yml
3. Note that the name of the package should be correct else the package install will fail.
# Note that inside the playbook yml file, the state line under the package name ensures that the latest version of the packages in the playbook are installed everytime the file is ran.
# To remove the packages in the playbook, change the state: to absent and that removes all packages with the absent state.
--To connect to an amazon ec3 instance use:
1. ssh -i <the location of your ssh-key.pem file given by amazon e.g ~/.ssh/my_key_pair.pem> ec2-user@public-ip-address-of-ec2-instance.
# Note to ssh into your ec2-instance from a linux machine run  chmod 400 /.ssh/my_key_pair.pem

-- To gather information about a specific server (e.g a server with a different distro) run below
ansible all -m gather_facts --limit <ip-address of the server>
# Information that you collect with the above caommand can be used to edit your 'when' statements in your playbook to install programs based on variables such as: os distribution, version, etc










# This section is used to troubleshoot ssh connection issues(ssh connection is asking for password instead of ssh-key passphrase (centos and ubuntu)

1. sudo nano /etc/ssh/sshd_config
2. Set PasswordAuthentication yes
3. Set ChallengeResponseAuthentication no
4. Set PermitRootLogin no (Before doing this, first make sure you add your user to list of sudo users first, in centos use usermod -aG wheel <username>)
5. Set PubkeyAuthentication yes
6. GSSAPIAuthentication yes
   GSSAPICleanupCredentials no
7. UsePAM yes
8. save file
9. systemctl restart sshd
10. ls -ld
11. chmod 0700 /home/[your-username]
12. ls -ld
13. chmod 0700 /home/your_home/.ssh
14. ls -ld authorized_keys
15. chmod 0600 /home/[username]/.ssh/authorized_keys

Finished!!!

curl --verbose -LJO <https://link>  # download a file directly from github. 
